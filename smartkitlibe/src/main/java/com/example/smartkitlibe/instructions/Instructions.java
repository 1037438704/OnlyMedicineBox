package com.example.smartkitlibe.instructions;


/**
 * 十六进制
 * 0  1  2  3  4   5   6   7   8   9   A   B   C   D   E   F
 * 十进制
 * 0   1   2   3   4   5   6   7   8   9   10  11  12  14  15
 * 二进制
 * 0000    0001    0010    0011    0100
 */

public class Instructions {
    /**
     * 方向     设备号帧头   长度   指令
     * APP→MCU	0x07	  0x01	0x01
     * 指令一  绑定请求
     * 7+1+1 = 9    256 - 9 = 247
     */
    private byte[] bindRequestOne = new byte[]{0x07, 0x01, 0x01, (byte) 0xf7};
    /**
     * 方向     设备号帧头   长度   指令
     * APP→MCU	0x07	0x01	0x03
     * 指令3  绑定请求
     * 收到此指令说明药盒已经绑定成功了，绑定流程结束。收到此指令，执行指令4，（注意此处需要置位一个标记）
     * 1、设备号帧头：0x07 固定值
     * 2、长度：指令位后面的所有数据，不包含指令位
     * 3、指令：0x03 固定值
     * 4、校验位：检验位之前的所有数据之和，取反加1	7+1+3 = 11  256-11 = 245
     */
    private byte[] bindRequestThree = new byte[]{0x07, 0x01, 0x03, (byte) 0xf5};

    /**
     * 指令5
     * APP→MCU  0x07	0x05	0x05	时间戳	时间戳	时间戳	时间戳
     * 通过这条指令接收来自小程序的时间戳，时间戳为格林威治时间
     * 1、设备号帧头：0x07 固定值
     * 2、长度：指令位后面的所有数据，不包含指令位
     * 3、指令：0x05 固定值
     * 4、数据1-数据4：时间戳，格林威治时间，高位前，低位后
     * 5、校验位：检验位之前的所有数据之和，取反加1
     * */



    /**
     * 方向     设备号帧头   长度   指令
     * APP→MCU	0x07	0x01	0x08
     * 指令6  查找设备请求
     * 4、校验位：检验位之前的所有数据之和，取反加1	7+1+8 = 16  256-16 = 240
     */
    private byte[] lookingForTheKit = new byte[]{0x07, 0x01, 0x08, (byte) 0xf0};





    /**
     * 指令8
     * 同步数据请求
     * APP→MCU   0x07	0x01	0x0A
     * 此指令是小程序请求药盒上传药盒中的服药记录，收到此指令后执行指令9
     * 1、设备号帧头：0x07 固定值
     * 2、长度：指令位后面的所有数据，不包含指令位
     * 3、指令：0x0A 固定值
     * 4、校验位：检验位之前的所有数据之和，取反加1
     * */



    /**
     * 指令10
     * APP→MCU	0x07	0x01	0x0B	成功0x01，失败0x02
     *此指令是在发送N条指令9后会收到，（N = 指令9中的‘【数据1】总条目数’），收到此指令后说明指令9传输的数据小程序都接收到了
     * 1、设备号帧头：0x07 固定值
     * 2、长度：指令位后面的所有数据，不包含指令位
     * 3、指令：0x0B 固定值
     * 4、数据1：数据上传的成功的标记，0x01表示指令9传输的服药记录小程序都收到了，0x02说明指令9传输的服药记录小程序有一部分没有收到
     * 5、校验位：检验位之前的所有数据之和，取反加1
     * */


    /**
     * 指令11
     * APP→MCU	0x07	0x07	0x30	药格编号	总定时条目，1-10	定时条目序号，1-10	相对时间戳	相对时间戳	相对时间戳	循环周期
     *
     * 此指令是用于小程序设置药盒提醒的指令，每次接收到此指令都需要回复指令12
     * 1、设备号帧头：0x07 固定值
     * 2、长度：指令位后面的所有数据，不包含指令位
     * 3、指令：0x30 固定值
     * 4、数据1：药格编号，知名本次设置的是那个药格（1-4）
     * 5、数据2：总定时器条目，本次设置的总体条目（1-9），当总条目为0是表示清除相应药格编号的所有提醒（单独一个药格，不是整个药盒）
     * 6、数据3：定时条目序号，本次设置的定时编号
     * 7、数据4-数据6：相对时间戳，这里时间戳不是标准的完成时间戳，是药仓设置提醒时相对于设置提醒当天0时的时间偏移（不管当天存不存在提醒）
     * 8、数据7：循环周期：循环周期占用1个字节共8位，最高位为0时，低位对应一周中的周几，最高位为1时，低位表示本条提醒隔多长时间提醒一次
     * 9、校验位：检验位之前的所有数据之和，取反加1
     * 注1：进行服药提醒设置时是以药格为基础，总定时器条目是指本药格总共要设置多少条服药提醒
     * 注2：当连续接收相同药格编号的服药提醒设置条目数和指令总定时器条目数相同时，认为设置完成，发送指令12，服药提醒设置成功
     * 注3：当在同一药格编号没有接收完成时接收到其他药格的提醒设置，认为本药格设置失败，发送指令12，服药提醒设置失败
     * 注4：当药格提醒设置失败时，前面接收成功的提醒设置全部无效，恢复本次设置前的服药提醒设置
     * 注5：挡设置的总定时器条目为0时，清除对应药格编号的所有提醒（单独一个药格，不是整个药盒）
     *
     * */

    public byte[] getBindRequestOne() {
        return bindRequestOne;
    }

    public byte[] getBindRequestThree() {
        return bindRequestThree;
    }

    public byte[] getLookingForTheKit() {
        return lookingForTheKit;
    }

}